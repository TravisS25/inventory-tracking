// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"github.com/TravisS25/httputil"
)

// UserGroup represents a row from 'public.user_group'.
type UserGroup struct {
	ID   int    `json:"id,omitempty" db:"id"`     // id
	Name string `json:"name,omitempty" db:"name"` // name
}

func QueryUserGroup(db httputil.SqlxDB, query string, args ...interface{}) (*UserGroup, error) {
	var dest UserGroup
	err := db.Get(&dest, query, args...)
	return &dest, err
}

func QueryUserGroups(db httputil.SqlxDB, query string, args ...interface{}) ([]*UserGroup, error) {
	var dest []*UserGroup
	err := db.Select(&dest, query, args...)
	return dest, err
}

// Insert inserts the UserGroup to the database.
func (ug *UserGroup) Insert(db httputil.XODB) error {
	var err error

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.user_group (` +
		`name` +
		`) VALUES (` +
		`$1` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, ug.Name)
	err = db.QueryRow(sqlstr, ug.Name).Scan(&ug.ID)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the UserGroup in the database.
func (ug *UserGroup) Update(db httputil.XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE public.user_group SET (` +
		`name` +
		`) = ( ` +
		`$1` +
		`) WHERE id = $2`

	// run query
	XOLog(sqlstr, ug.Name, ug.ID)
	_, err = db.Exec(sqlstr, ug.Name, ug.ID)
	return err
}

// Upsert performs an upsert for UserGroup.
//
// NOTE: PostgreSQL 9.5+ only
func (ug *UserGroup) Upsert(db httputil.XODB) error {
	var err error

	// sql query
	const sqlstr = `INSERT INTO public.user_group (` +
		`id, name` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, name` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.name` +
		`)`

	// run query
	XOLog(sqlstr, ug.ID, ug.Name)
	_, err = db.Exec(sqlstr, ug.ID, ug.Name)
	if err != nil {
		return err
	}

	return nil
}

// Delete deletes the UserGroup from the database.
func (ug *UserGroup) Delete(db httputil.XODB) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM public.user_group WHERE id = $1`

	// run query
	XOLog(sqlstr, ug.ID)
	_, err = db.Exec(sqlstr, ug.ID)
	if err != nil {
		return err
	}

	return nil
}
