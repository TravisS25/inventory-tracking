// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"github.com/TravisS25/httputil"
)

// BuildingFloor represents a row from 'public.building_floor'.
type BuildingFloor struct {
	ID         int       `json:"id,omitempty" db:"id"`                  // id
	BuildingID int       `json:"buildingID,omitempty" db:"building_id"` // building_id
	Name       string    `json:"name,omitempty" db:"name"`              // name
	Building   *Building `json:"building,omitempty" db:"building"`
}

func QueryBuildingFloor(db httputil.SqlxDB, query string, args ...interface{}) (*BuildingFloor, error) {
	var dest BuildingFloor
	err := db.Get(&dest, query, args...)
	return &dest, err
}

func QueryBuildingFloors(db httputil.SqlxDB, query string, args ...interface{}) ([]*BuildingFloor, error) {
	var dest []*BuildingFloor
	err := db.Select(&dest, query, args...)
	return dest, err
}

// Insert inserts the BuildingFloor to the database.
func (bf *BuildingFloor) Insert(db httputil.XODB) error {
	var err error

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.building_floor (` +
		`building_id, name` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, bf.BuildingID, bf.Name)
	err = db.QueryRow(sqlstr, bf.BuildingID, bf.Name).Scan(&bf.ID)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the BuildingFloor in the database.
func (bf *BuildingFloor) Update(db httputil.XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE public.building_floor SET (` +
		`building_id, name` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE id = $3`

	// run query
	XOLog(sqlstr, bf.BuildingID, bf.Name, bf.ID)
	_, err = db.Exec(sqlstr, bf.BuildingID, bf.Name, bf.ID)
	return err
}

// Upsert performs an upsert for BuildingFloor.
//
// NOTE: PostgreSQL 9.5+ only
func (bf *BuildingFloor) Upsert(db httputil.XODB) error {
	var err error

	// sql query
	const sqlstr = `INSERT INTO public.building_floor (` +
		`id, building_id, name` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, building_id, name` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.building_id, EXCLUDED.name` +
		`)`

	// run query
	XOLog(sqlstr, bf.ID, bf.BuildingID, bf.Name)
	_, err = db.Exec(sqlstr, bf.ID, bf.BuildingID, bf.Name)
	if err != nil {
		return err
	}

	return nil
}

// Delete deletes the BuildingFloor from the database.
func (bf *BuildingFloor) Delete(db httputil.XODB) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM public.building_floor WHERE id = $1`

	// run query
	XOLog(sqlstr, bf.ID)
	_, err = db.Exec(sqlstr, bf.ID)
	if err != nil {
		return err
	}

	return nil
}
