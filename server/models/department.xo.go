// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"github.com/TravisS25/httputil"
)

// Department represents a row from 'public.department'.
type Department struct {
	ID              int            `json:"id,omitempty" db:"id"`                             // id
	BuildingFloorID int            `json:"buildingFloorID,omitempty" db:"building_floor_id"` // building_floor_id
	Name            string         `json:"name,omitempty" db:"name"`                         // name
	BuildingFloor   *BuildingFloor `json:"buildingFloor,omitempty" db:"building_floor"`
}

func QueryDepartment(db httputil.SqlxDB, query string, args ...interface{}) (*Department, error) {
	var dest Department
	err := db.Get(&dest, query, args...)
	return &dest, err
}

func QueryDepartments(db httputil.SqlxDB, query string, args ...interface{}) ([]*Department, error) {
	var dest []*Department
	err := db.Select(&dest, query, args...)
	return dest, err
}

// Insert inserts the Department to the database.
func (d *Department) Insert(db httputil.XODB) error {
	var err error

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.department (` +
		`building_floor_id, name` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, d.BuildingFloorID, d.Name)
	err = db.QueryRow(sqlstr, d.BuildingFloorID, d.Name).Scan(&d.ID)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the Department in the database.
func (d *Department) Update(db httputil.XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE public.department SET (` +
		`building_floor_id, name` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE id = $3`

	// run query
	XOLog(sqlstr, d.BuildingFloorID, d.Name, d.ID)
	_, err = db.Exec(sqlstr, d.BuildingFloorID, d.Name, d.ID)
	return err
}

// Upsert performs an upsert for Department.
//
// NOTE: PostgreSQL 9.5+ only
func (d *Department) Upsert(db httputil.XODB) error {
	var err error

	// sql query
	const sqlstr = `INSERT INTO public.department (` +
		`id, building_floor_id, name` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, building_floor_id, name` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.building_floor_id, EXCLUDED.name` +
		`)`

	// run query
	XOLog(sqlstr, d.ID, d.BuildingFloorID, d.Name)
	_, err = db.Exec(sqlstr, d.ID, d.BuildingFloorID, d.Name)
	if err != nil {
		return err
	}

	return nil
}

// Delete deletes the Department from the database.
func (d *Department) Delete(db httputil.XODB) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM public.department WHERE id = $1`

	// run query
	XOLog(sqlstr, d.ID)
	_, err = db.Exec(sqlstr, d.ID)
	if err != nil {
		return err
	}

	return nil
}
