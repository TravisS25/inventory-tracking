// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"github.com/TravisS25/httputil"
)

// SchemaMigration represents a row from 'public.schema_migrations'.
type SchemaMigration struct {
	Version int64 `json:"version,omitempty" db:"version"` // version
	Dirty   bool  `json:"dirty" db:"dirty"`               // dirty
}

func QuerySchemaMigration(db httputil.SqlxDB, query string, args ...interface{}) (*SchemaMigration, error) {
	var dest SchemaMigration
	err := db.Get(&dest, query, args...)
	return &dest, err
}

func QuerySchemaMigrations(db httputil.SqlxDB, query string, args ...interface{}) ([]*SchemaMigration, error) {
	var dest []*SchemaMigration
	err := db.Select(&dest, query, args...)
	return dest, err
}

// Insert inserts the SchemaMigration to the database.
func (sm *SchemaMigration) Insert(db httputil.XODB) error {
	var err error

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.schema_migrations (` +
		`version, dirty` +
		`) VALUES (` +
		`$1, $2` +
		`)`

	// run query
	XOLog(sqlstr, sm.Version, sm.Dirty)
	err = db.QueryRow(sqlstr, sm.Version, sm.Dirty).Scan(&sm.Version)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the SchemaMigration in the database.
func (sm *SchemaMigration) Update(db httputil.XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE public.schema_migrations SET (` +
		`dirty` +
		`) = ( ` +
		`$1` +
		`) WHERE version = $2`

	// run query
	XOLog(sqlstr, sm.Dirty, sm.Version)
	_, err = db.Exec(sqlstr, sm.Dirty, sm.Version)
	return err
}

// Upsert performs an upsert for SchemaMigration.
//
// NOTE: PostgreSQL 9.5+ only
func (sm *SchemaMigration) Upsert(db httputil.XODB) error {
	var err error

	// sql query
	const sqlstr = `INSERT INTO public.schema_migrations (` +
		`version, dirty` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT (version) DO UPDATE SET (` +
		`version, dirty` +
		`) = (` +
		`EXCLUDED.version, EXCLUDED.dirty` +
		`)`

	// run query
	XOLog(sqlstr, sm.Version, sm.Dirty)
	_, err = db.Exec(sqlstr, sm.Version, sm.Dirty)
	if err != nil {
		return err
	}

	return nil
}

// Delete deletes the SchemaMigration from the database.
func (sm *SchemaMigration) Delete(db httputil.XODB) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM public.schema_migrations WHERE version = $1`

	// run query
	XOLog(sqlstr, sm.Version)
	_, err = db.Exec(sqlstr, sm.Version)
	if err != nil {
		return err
	}

	return nil
}
