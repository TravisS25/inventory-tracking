// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"github.com/TravisS25/httputil"
)

// MachineStatus represents a row from 'public.machine_status'.
type MachineStatus struct {
	ID     int    `json:"id,omitempty" db:"id"`         // id
	Status string `json:"status,omitempty" db:"status"` // status
}

func QueryMachineStatus(db httputil.SqlxDB, query string, args ...interface{}) (*MachineStatus, error) {
	var dest MachineStatus
	err := db.Get(&dest, query, args...)
	return &dest, err
}

func QueryMachineStatuses(db httputil.SqlxDB, query string, args ...interface{}) ([]*MachineStatus, error) {
	var dest []*MachineStatus
	err := db.Select(&dest, query, args...)
	return dest, err
}

// Insert inserts the MachineStatus to the database.
func (ms *MachineStatus) Insert(db httputil.XODB) error {
	var err error

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.machine_status (` +
		`status` +
		`) VALUES (` +
		`$1` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, ms.Status)
	err = db.QueryRow(sqlstr, ms.Status).Scan(&ms.ID)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the MachineStatus in the database.
func (ms *MachineStatus) Update(db httputil.XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE public.machine_status SET (` +
		`status` +
		`) = ( ` +
		`$1` +
		`) WHERE id = $2`

	// run query
	XOLog(sqlstr, ms.Status, ms.ID)
	_, err = db.Exec(sqlstr, ms.Status, ms.ID)
	return err
}

// Upsert performs an upsert for MachineStatus.
//
// NOTE: PostgreSQL 9.5+ only
func (ms *MachineStatus) Upsert(db httputil.XODB) error {
	var err error

	// sql query
	const sqlstr = `INSERT INTO public.machine_status (` +
		`id, status` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, status` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.status` +
		`)`

	// run query
	XOLog(sqlstr, ms.ID, ms.Status)
	_, err = db.Exec(sqlstr, ms.ID, ms.Status)
	if err != nil {
		return err
	}

	return nil
}

// Delete deletes the MachineStatus from the database.
func (ms *MachineStatus) Delete(db httputil.XODB) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM public.machine_status WHERE id = $1`

	// run query
	XOLog(sqlstr, ms.ID)
	_, err = db.Exec(sqlstr, ms.ID)
	if err != nil {
		return err
	}

	return nil
}
