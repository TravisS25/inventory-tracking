// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"github.com/TravisS25/httputil"
	uuid "github.com/satori/go.uuid"
)

// LoggingHistory represents a row from 'public.logging_history'.
type LoggingHistory struct {
	ID          uuid.UUID    `json:"id,omitempty" db:"id"`                     // id
	DateEntered *string      `json:"dateEntered,omitempty" db:"date_entered"`  // date_entered
	URL         string       `json:"url,omitempty" db:"url"`                   // url
	Operation   string       `json:"operation,omitempty" db:"operation"`       // operation
	Value       *string      `json:"value,omitempty" db:"value"`               // value
	EnteredByID *int         `json:"enteredByID,omitempty" db:"entered_by_id"` // entered_by_id
	EnteredBy   *UserProfile `json:"enteredBy,omitempty" db:"entered_by"`
}

func QueryLoggingHistory(db httputil.SqlxDB, query string, args ...interface{}) (*LoggingHistory, error) {
	var dest LoggingHistory
	err := db.Get(&dest, query, args...)
	return &dest, err
}

func QueryLoggingHistories(db httputil.SqlxDB, query string, args ...interface{}) ([]*LoggingHistory, error) {
	var dest []*LoggingHistory
	err := db.Select(&dest, query, args...)
	return dest, err
}

// Insert inserts the LoggingHistory to the database.
func (lh *LoggingHistory) Insert(db httputil.XODB) error {
	var err error

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.logging_history (` +
		`id, date_entered, url, operation, value, entered_by_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`

	// run query
	XOLog(sqlstr, lh.ID, lh.DateEntered, lh.URL, lh.Operation, lh.Value, lh.EnteredByID)
	err = db.QueryRow(sqlstr, lh.ID, lh.DateEntered, lh.URL, lh.Operation, lh.Value, lh.EnteredByID).Scan(&lh.ID)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the LoggingHistory in the database.
func (lh *LoggingHistory) Update(db httputil.XODB) error {
	var err error

	// sql query
	const sqlstr = `UPDATE public.logging_history SET (` +
		`date_entered, url, operation, value, entered_by_id` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE id = $6`

	// run query
	XOLog(sqlstr, lh.DateEntered, lh.URL, lh.Operation, lh.Value, lh.EnteredByID, lh.ID)
	_, err = db.Exec(sqlstr, lh.DateEntered, lh.URL, lh.Operation, lh.Value, lh.EnteredByID, lh.ID)
	return err
}

// Upsert performs an upsert for LoggingHistory.
//
// NOTE: PostgreSQL 9.5+ only
func (lh *LoggingHistory) Upsert(db httputil.XODB) error {
	var err error

	// sql query
	const sqlstr = `INSERT INTO public.logging_history (` +
		`id, date_entered, url, operation, value, entered_by_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, date_entered, url, operation, value, entered_by_id` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.date_entered, EXCLUDED.url, EXCLUDED.operation, EXCLUDED.value, EXCLUDED.entered_by_id` +
		`)`

	// run query
	XOLog(sqlstr, lh.ID, lh.DateEntered, lh.URL, lh.Operation, lh.Value, lh.EnteredByID)
	_, err = db.Exec(sqlstr, lh.ID, lh.DateEntered, lh.URL, lh.Operation, lh.Value, lh.EnteredByID)
	if err != nil {
		return err
	}

	return nil
}

// Delete deletes the LoggingHistory from the database.
func (lh *LoggingHistory) Delete(db httputil.XODB) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM public.logging_history WHERE id = $1`

	// run query
	XOLog(sqlstr, lh.ID)
	_, err = db.Exec(sqlstr, lh.ID)
	if err != nil {
		return err
	}

	return nil
}
